{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/caiqueSanderson/python-studies/blob/main/TP2_Programa%C3%A7%C3%A3o_com_Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Programação com Python - TP2\n",
        "## Professor: Adalberto Oliveira\n",
        "\n",
        "### Nome do Aluno(a): Caique Sanderson de Sá Borges\n"
      ],
      "metadata": {
        "id": "awPAFEFTuHNN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Respostas das Questões"
      ],
      "metadata": {
        "id": "ZTXpPnDPzEtI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Questão 1"
      ],
      "metadata": {
        "id": "sZNFHxBF0E7b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que apresente um menu inicial com as opções listadas abaixo e que tenha como retorno a opção escolhida:\n",
        "\n",
        "\n",
        "    1) Criar um registro\n",
        "    2) Consultar um registro pelo ID\n",
        "    3) Listar os registro\n",
        "    4) Modificar um registro\n",
        "    5) Apagar um registro\n",
        "    6) Sair."
      ],
      "metadata": {
        "id": "3NgX57HJyKc7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def menu():\n",
        "  print(f\"***   Seja bem-vindo   ***\")\n",
        "  print(\" Insira 1 para criar um registro \\n Insira 2 para consultar um registro pelo ID \\n Insira 3 para listar os registros \\n Insira 4 modificar um registro \\n Insira 5 para apagar um registro \\n Insira 6 para sair\")\n",
        "  escolha = int(input(\"Opção desejada: \"))\n",
        "\n",
        "  if escolha == 1:\n",
        "    return \"criar registro\"\n",
        "  elif escolha == 2:\n",
        "    return \"consultar um registro\"\n",
        "  elif escolha == 3:\n",
        "    return \"listar os registros\"\n",
        "  elif escolha == 4:\n",
        "    return \"modificar um registro\"\n",
        "  elif escolha == 5:\n",
        "    return \"apagar um registro\"\n",
        "  elif escolha == 6:\n",
        "    return \"sair\"\n",
        "  else:\n",
        "    return \"Opção inválida\"\n",
        "\n",
        "escolha_usuario = menu()\n",
        "print(f\"A opção escolhida foi: {escolha_usuario}\")\n"
      ],
      "metadata": {
        "id": "IFyhL6HsyV4e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dcaf1f9b-4f75-479b-a178-0631723cfad8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "***   Seja bem-vindo   ***\n",
            " Insira 1 para criar um registro \n",
            " Insira 2 para consultar um registro pelo ID \n",
            " Insira 3 para listar os registros \n",
            " Insira 4 modificar um registro \n",
            " Insira 5 para apagar um registro \n",
            " Insira 6 para sair\n",
            "Opção desejada: 1\n",
            "A opção escolhida foi: criar registro\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 2"
      ],
      "metadata": {
        "id": "wxPxFZKWyYSd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que solicite o nome completo que será salvo no registro e devolva com as iniciais em maiúscula."
      ],
      "metadata": {
        "id": "2wXI1hUz0KDm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def nome_completo():\n",
        "  nome = input(\"Insira seu nome completo: \")\n",
        "  nome_completo_formatado = nome.title()\n",
        "  return nome_completo_formatado\n",
        "\n",
        "nome_completo()"
      ],
      "metadata": {
        "id": "pB_F44VcybOr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "2c65ed58-7f16-44c4-b3aa-d025cb5f5e34"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Insira seu nome completo: caique sanderson de sa borges\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Caique Sanderson De Sa Borges'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 3"
      ],
      "metadata": {
        "id": "0pP8J_g7ydcM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que solicite a data de nascimento e devolva no formato dd-mm-aaaa, verificando se é uma data válida. Utilize como critério o valor de mês entre 1 e 12, e se o dia corresponde a um dia válido no mês. Para isso, garanta que casos com o ano bissexto ou dias 31 ocorram de forma correta.\n"
      ],
      "metadata": {
        "id": "BFpPyo1W0QGT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def data_nascimento():\n",
        "  data = input(\"Insira sua data de nascimento(ddmmaaaa): \")\n",
        "\n",
        "  dia = int(data[0] + data[1])\n",
        "  mes = int(data[2] + data[3])\n",
        "  ano = int(data[4] + data[5] + data[6] + data[7])\n",
        "\n",
        "  if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):\n",
        "    dias_por_mes = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n",
        "  else:\n",
        "    dias_por_mes = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n",
        "\n",
        "  if 1 <= mes <= 12 and 1 <= dia <= dias_por_mes[mes]:\n",
        "    data_formatada = f\"{dia:02d}-{mes:02d}-{ano:04d}\"\n",
        "    return data_formatada\n",
        "  else:\n",
        "    return False\n",
        "\n",
        "data_nascimento()"
      ],
      "metadata": {
        "id": "SmfeLkCAyeB-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "3bbf8fcf-0ef3-4371-944a-42552a341ff2"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Insira sua data de nascimento(ddmmaaaa): 08062004\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'08-06-2004'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 4"
      ],
      "metadata": {
        "id": "fhx-Vg9gyleV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que receba como parâmetro de entrada o dado CPF no formato XXXXXXXXXXX e verifique se esse é um valor válido, tendo como saída um valor booleano de Verdadeiro ou Falso.\n"
      ],
      "metadata": {
        "id": "XzNAn1w72EEI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def valida_cpf(cpf):\n",
        "  cpf_str = str(cpf)\n",
        "  if len(cpf_str) != 11:\n",
        "    return False\n",
        "\n",
        "  elif len(cpf_str) == 11:\n",
        "    cpf_lista_inteiros = [int(char) for char in cpf_str]\n",
        "    if len(set(cpf_lista_inteiros)) == 1:\n",
        "      return False\n",
        "    else:\n",
        "      soma = sum([(cpf_lista_inteiros[i] * (10 - i)) for i in range(9)])\n",
        "      resto = (soma * 10) % 11\n",
        "      if resto == cpf_lista_inteiros[9]:\n",
        "        soma = sum([(cpf_lista_inteiros[i] * (11 - i)) for i in range(10)])\n",
        "        resto = (soma * 10) % 11\n",
        "        if resto == cpf_lista_inteiros[10]:\n",
        "          return True\n",
        "      else:\n",
        "        return False\n",
        "\n",
        "cpf_valido = valida_cpf(52998224725)\n",
        "cpf_invalido = valida_cpf(11111111111)\n",
        "\n",
        "print(cpf_valido,cpf_invalido)"
      ],
      "metadata": {
        "id": "b3kFFXbfynD8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d2e61a7b-b82c-4b54-d49c-e123771c442d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 5"
      ],
      "metadata": {
        "id": "YEu0UO8Gynhe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que solicite o CPF e retorne o valor no formato XXX.XXX.XXX-XX, caso seja um valor válido, ou Falso, caso seja inválido."
      ],
      "metadata": {
        "id": "-lFlsL692IT5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def solicita_cpf():\n",
        "  cpf = input(\"Insira seu cpf: \")\n",
        "  if valida_cpf(cpf) == True:\n",
        "    cpf_str = str(cpf)\n",
        "    cpf_formatado = \"{}.{}.{}-{}\".format(cpf_str[:3], cpf_str[3:6], cpf_str[6:9], cpf_str[9:])\n",
        "    return cpf_formatado\n",
        "  else:\n",
        "    return False\n",
        "\n",
        "cpf_valido = solicita_cpf()\n",
        "cpf_invalido = solicita_cpf()\n",
        "\n",
        "print(cpf_valido,cpf_invalido)"
      ],
      "metadata": {
        "id": "sJuCwluCyuaG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b1fa7edb-76ac-4daf-9eba-0caa64f91d91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Insira seu cpf: 52998224725\n",
            "Insira seu cpf: 11111111111\n",
            "529.982.247-25 False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 6"
      ],
      "metadata": {
        "id": "HKV_upK5yu6S"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que solicite ao usuário os dados cadastrais listados abaixo e que tenha como retorno uma lista contendo esses valores na ordem apresentada:\n",
        "    \n",
        "    1) Nome completo\n",
        "    2) Data de nascimento\n",
        "    3) CPF\n",
        "    4) Endereço de email\n",
        "Obs: A função deve utilizar um laço que garanta que todos os valores sejam válidos e utilizar as funções desenvolvidas previamente."
      ],
      "metadata": {
        "id": "rI0fAsPp2Ql4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def valida_email():\n",
        "  email = input(\"Insira seu e-mail: \")\n",
        "  if \"@\" in email and \".\" in email:\n",
        "    return email\n",
        "  else:\n",
        "    return False\n",
        "\n",
        "def solicita_dados_cadastrais():\n",
        "  while True:\n",
        "    nome = nome_completo()\n",
        "    if not nome:\n",
        "      print(\"Nome inválido\")\n",
        "      break\n",
        "    data_de_nascimento = data_nascimento()\n",
        "    if not data_de_nascimento:\n",
        "      print(\"Data de nascimento inválida\")\n",
        "      break\n",
        "    cpf = solicita_cpf()\n",
        "    if not cpf:\n",
        "      print(\"CPF inválido\")\n",
        "      break\n",
        "    email = valida_email()\n",
        "    if not email:\n",
        "      print(\"E-mail inválido\")\n",
        "      break\n",
        "\n",
        "    dados_usuario = [nome,data_de_nascimento,cpf,email]\n",
        "    return dados_usuario\n",
        "\n",
        "solicita_dados_cadastrais()"
      ],
      "metadata": {
        "id": "RXFZ6iuuyw-o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eab6ec75-60d5-4cea-99f4-d498817d043a"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Insira seu nome completo: caique sanderson de sa borges\n",
            "Insira sua data de nascimento(ddmmaaaa): 08062004\n",
            "Insira seu cpf: 52998224725\n",
            "Insira seu e-mail: caique@gmail.com\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Caique Sanderson De Sa Borges',\n",
              " '08-06-2004',\n",
              " '529.982.247-25',\n",
              " 'caique@gmail.com']"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 7\n"
      ],
      "metadata": {
        "id": "R8n6Oou6dw7c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que receba como parâmetro um vetor de cadastro e um valor de ID e imprima o valor do registro desejado a partir da lista recebida por parâmetro."
      ],
      "metadata": {
        "id": "D996IEU7eCRR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def imprimir_registro(vetor_cadastro, id):\n",
        "  indice = id - 1\n",
        "  if 0 <= indice < len(vetor_cadastro):\n",
        "    print(vetor_cadastro[indice])\n",
        "  else:\n",
        "      print(\"Registro não encontrado\")\n",
        "\n",
        "imprimir_registro([\n",
        "    ['Caique Sanderson De Sa Borges','08-06-2004','529.982.247-25','caique@gmail.com'],\n",
        "    ['Fulano De Tal','25-12-2000','529.982.247-25','fulano@gmail.com'],\n",
        "    ], 2)"
      ],
      "metadata": {
        "id": "SUpydO2LeBkJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "92127938-14ca-46d8-c960-8844da6e3116"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Fulano De Tal', '25-12-2000', '529.982.247-25', 'fulano@gmail.com']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 8\n"
      ],
      "metadata": {
        "id": "FiF0D2e41DRQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que imprima, de forma ordenada, todos os registros existentes em uma lista passada por parâmetro."
      ],
      "metadata": {
        "id": "W9T622mS1MJQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def listar_registros(registros):\n",
        "  if not registros:\n",
        "    print(\"Não possui nenhum registro no banco de dados\")\n",
        "  for i, registro in enumerate(registros):\n",
        "    print(f\"ID: {i + 1}:\", registro)\n",
        "\n",
        "listar_registros([\n",
        "    ['Caique Sanderson De Sa Borges','08-06-2004','529.982.247-25','caique@gmail.com'],\n",
        "    ['Fulano De Tal','25-12-2000','529.982.247-25','fulano@gmail.com'],\n",
        "    ])"
      ],
      "metadata": {
        "id": "L6ENec_B1LRL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e92d271-f34d-42f4-f9b5-1e9e3675234b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ID: 1: ['Caique Sanderson De Sa Borges', '08-06-2004', '529.982.247-25', 'caique@gmail.com']\n",
            "ID: 2: ['Fulano De Tal', '25-12-2000', '529.982.247-25', 'fulano@gmail.com']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 9\n"
      ],
      "metadata": {
        "id": "n2M2w8zwGW5-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que receba como parâmetros uma lista de registros e um número ID e realize a remoção desse registro."
      ],
      "metadata": {
        "id": "qLJvCpsuG1k3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def remover_registro(registros, id):\n",
        "  indice = id - 1\n",
        "  if 0 <= indice < len(registros):\n",
        "    print(f\"O registro removido foi: {registros[indice]}\")\n",
        "    del registros[indice]\n",
        "  else:\n",
        "    print(\"Registro não encontrado\")\n",
        "\n",
        "remover_registro([\n",
        "    ['Caique Sanderson De Sa Borges','08-06-2004','529.982.247-25','caique@gmail.com'],\n",
        "    ['Fulano De Tal','25-12-2000','529.982.247-25','fulano@gmail.com'],\n",
        "    ], 1)"
      ],
      "metadata": {
        "id": "fyqntbJLH3Pm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b7a51abd-af25-4b8d-8ed1-8d7d5794f502"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "O registro removido foi: ['Caique Sanderson De Sa Borges', '08-06-2004', '529.982.247-25', 'caique@gmail.com']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 10"
      ],
      "metadata": {
        "id": "Yz-EBQ74GcFG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que solicite ao usuário qual registro deve ser modificado e qual dos valores deverão ser atualizados. O retorno deverá ser o ID do registro que será modificado e os respectivos valores dos campos.\n",
        "Sugestão: os valores que permanecerão inalterados podem ser definidos como None."
      ],
      "metadata": {
        "id": "ZbzzCzWyHzLx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def atualizar_registro(registros):\n",
        "  id = int(input(\"Insira o ID do registro que deseja modificar: \"))\n",
        "  indice = id - 1\n",
        "\n",
        "  if 0 <= indice < len(registros):\n",
        "    print(\" Insira 1 para modificar o nome \\n Insira 2 para alterar a data de nascimento \\n Insira 3 para alterar CPF \\n Insira 4 para alterar o e-mail\")\n",
        "    campo_escolhido = int(input(\"Qual o campo que será modificado? \"))\n",
        "    if campo_escolhido == 1:\n",
        "      novo_nome = input(\"Insira o novo nome: \")\n",
        "      registros[indice][0] = novo_nome\n",
        "    elif campo_escolhido == 2:\n",
        "      nova_data_nascimento = input(\"Insira a nova data de nascimento: \")\n",
        "      registros[indice][1] = nova_data_nascimento\n",
        "    elif campo_escolhido == 3:\n",
        "      novo_cpf = input(\"Insira o novo CPF: \")\n",
        "      registros[indice][2] = novo_cpf\n",
        "    elif campo_escolhido == 4:\n",
        "      novo_email = input(\"Insira o novo e-mail: \")\n",
        "      registros[indice][3] = novo_email\n",
        "    else:\n",
        "      print(\"Opção inválida. Nenhum campo foi alterado.\")\n",
        "\n",
        "  else:\n",
        "    print(\"Registro não encontrado\")\n",
        "\n",
        "  return id, registros[indice]\n",
        "\n",
        "atualizar_registro([\n",
        "    ['Caique Sanderson De Sa Borges', '08-06-2004', '529.982.247-25', 'caique@gmail.com'],\n",
        "    ['Fulano De Tal', '25-12-2000', '529.982.247-25', 'fulano@gmail.com'],\n",
        "])\n",
        "\n"
      ],
      "metadata": {
        "id": "IPa_2BvAHz3x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fee9d92e-cde8-4f35-b456-ecfcc9d9d75d"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Insira o ID do registro que deseja modificar: 1\n",
            "Insira 1 para modificar o nome \n",
            " Insira 2 para alterar a data de nascimento \n",
            " Insira 3 para alterar cpf \n",
            " Insira 4 para alterar o e-mail\n",
            "Qual o campo que será modificado? 1\n",
            "Insira o novo nome: kaka\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, ['kaka', '08-06-2004', '529.982.247-25', 'caique@gmail.com'])"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 11"
      ],
      "metadata": {
        "id": "Wplp3eeDGkfh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que receba um registro em formato de lista e modifique um ou mais valores dessa lista. Esse valor (ou valores) deverá ser passado por parâmetro para a função. O retorno deverá ser o registro com o valor modificado."
      ],
      "metadata": {
        "id": "Bgzu3DquHpzn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def modificar_registro(registro):\n",
        "  id_para_modificar = int(input(\"Insira o ID do registro que deseja modificar: \"))\n",
        "  indice = id_para_modificar - 1\n",
        "\n",
        "  if 0 <= indice < len(registro):\n",
        "    print(\" Insira 0 para encerrar as modificaçes \\n Insira 1 para modificar o nome \\n Insira 2 para alterar a data de nascimento \\n Insira 3 para alterar CPF \\n Insira 4 para alterar o e-mail\")\n",
        "\n",
        "    while True:\n",
        "      campo_escolhido = int(input(\"Qual o campo que será modificado? \"))\n",
        "      if campo_escolhido == 0:\n",
        "        break\n",
        "      if 1 <= campo_escolhido <= 4:\n",
        "        novo_valor = input(f\"Insira o novo valor para o campo {campo_escolhido} ({registro[indice][campo_escolhido-1]}): \")\n",
        "        registro[indice][campo_escolhido-1] = novo_valor if novo_valor.strip() else registro[indice][campo_escolhido-1]\n",
        "      else:\n",
        "        print(\"Opção inválida. Nenhum campo foi alterado.\")\n",
        "\n",
        "  return registro[indice]\n",
        "\n",
        "modificar_registro([\n",
        "    ['San', '02-06-2000', '529.982.247-25', 'caique@gmail.com'],\n",
        "    ['Fulano De Tal', '25-12-2000', '529.982.247-25', 'fulano@gmail.com'],\n",
        "])"
      ],
      "metadata": {
        "id": "m34qEVyeHtSF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9d65cacd-3fca-4a6f-da3b-fb9122303651"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Insira o ID do registro que deseja modificar: 1\n",
            " Insira 0 para encerrar as modificaçes \n",
            " Insira 1 para modificar o nome \n",
            " Insira 2 para alterar a data de nascimento \n",
            " Insira 3 para alterar CPF \n",
            " Insira 4 para alterar o e-mail\n",
            "Qual o campo que será modificado? 1\n",
            "Insira o novo valor para o campo 1 (Caique Sanderson De Sa Borges): Beltrano Da Silva\n",
            "Qual o campo que será modificado? 0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Beltrano Da Silva', '08-06-2004', '529.982.247-25', 'caique@gmail.com']"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 12"
      ],
      "metadata": {
        "id": "Bv9F7LF0Gqbh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva uma função que modifique um registro dentro de uma lista de registros (banco de dados). Ela deve receber como parâmetros a lista com todos os registros (banco de dados), a posição que deverá ser modificada e uma lista com o novo valor do registro que deverá ser alterado. O retorno deve ser a lista de registros, com o valor modificado."
      ],
      "metadata": {
        "id": "SizmdKDZG2_e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def modificar_registro(registros, posicao, novos_valores):\n",
        "  indice = posicao - 1\n",
        "  if 0 <= indice < len(registros):\n",
        "    registros[indice] = novos_valores\n",
        "    return registros\n",
        "  else:\n",
        "    print(\"Posição de modificação inválida. Nenhum registro foi modificado.\")\n",
        "    return registros\n",
        "\n",
        "modificar_registro([\n",
        "    ['San', '02-06-2000', '529.982.247-25', 'caique@gmail.com'],\n",
        "    ['Fulano De Tal', '25-12-2000', '529.982.247-25', 'fulano@gmail.com'],\n",
        "], 1, ['Francisco','12/04/1979','529.982.247-25','francisco@gmail.com'])\n"
      ],
      "metadata": {
        "id": "W_dvKNUmHoj-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8249e61c-f9fe-4bbd-e75d-f431c95b5213"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[['Francisco', '12/04/1979', '529.982.247-25', 'francisco@gmail.com'],\n",
              " ['Fulano De Tal', '25-12-2000', '529.982.247-25', 'fulano@gmail.com']]"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Questão 13"
      ],
      "metadata": {
        "id": "rb2udBwoG67U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desenvolva um script que seja capaz de realizar as seguintes ações:\n",
        "\n",
        "    1. Inicialize um vetor para salvar vetores de registros.\n",
        "    2. Exiba uma lista de opções para o usuário, utilizando a função desenvolvida na questão 1.\n",
        "    3. Execute o programa de forma indefinida, até que a opção de sair seja escolhida."
      ],
      "metadata": {
        "id": "Z5B1D_QmHByx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "registros = []\n",
        "\n",
        "while True:\n",
        "  opcao_escolhida = menu()\n",
        "  print(f\"Opção escolhida: {opcao_escolhida}\")\n",
        "  if opcao_escolhida == \"sair\":\n",
        "    break\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nWV01OcTHQrB",
        "outputId": "77df82cf-8298-4793-bad8-7e887ded7604"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "***   Seja bem-vindo   ***\n",
            " Insira 1 para criar um registro \n",
            " Insira 2 para consultar um registro pelo ID \n",
            " Insira 3 para listar os registros \n",
            " Insira 4 modificar um registro \n",
            " Insira 5 para apagar um registro \n",
            " Insira 6 para sair\n",
            "Opção desejada: 6\n",
            "Opção escolhida: sair\n"
          ]
        }
      ]
    }
  ]
}
